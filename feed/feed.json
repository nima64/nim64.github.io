{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Eleventy Base Blog v8",
	"language": "en",
	"home_page_url": "https://example.com/",
	"feed_url": "https://example.com/feed/feed.json",
	"description": "I am writing about my experiences as a naval navel-gazer.",
	"author": {
		"name": "Your Name Here",
		"url": "https://example.com/about-me/"
	},
	"items": [
		{
			"id": "https://example.com/blog/svd-image-compression/",
			"url": "https://example.com/blog/svd-image-compression/",
			"title": "Singular Value Decomposition and it&#39;s use in Image compression.",
			"content_html": "<p>While reading through Strang's <em>Linear Algebra and It's Applications</em> I came upon this passage about SVD and one of it's many applications image compression.\n<img alt=\"svd-strang\" src=\"https://example.com/img/SVD-Strang.png\"></p>\n<p>SVD in a more compact form with the outer product being explicit.</p>\n<p>$$\\sum_{k=1}^{r}\\sigma_{k}u_{k} \\otimes v_{k}$$</p>\n<h2 id=\"how-svd-compression-works\" tabindex=\"-1\">How SVD Compression Works <a class=\"header-anchor\" href=\"https://example.com/blog/svd-image-compression/\">#</a></h2>\n<p>SVD compression lies on the fact most of the information is contained in very few singular values $$\\sigma$$ being very large while the rest are close to 0.</p>\n<p>The example by Strang: given a 1000x1000 matrix and say 98% of singular values are close to zero then we can get rid of them. So that only leaves us with 20 singular values, r=20, from the summation we only need 20 columns of U and V^T to reproduce the image.</p>\n<h2 id=\"testing-it-in-code-with-stbi-and-eigen\" tabindex=\"-1\">Testing it in code with stbi and Eigen <a class=\"header-anchor\" href=\"https://example.com/blog/svd-image-compression/\">#</a></h2>\n<pre class=\"language-cpp\" tabindex=\"0\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Eigen/Dense></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;malloc/_malloc.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">STB_IMAGE_IMPLEMENTATION</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stb_image.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">STB_IMAGE_WRITE_IMPLEMENTATION</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stb_image_write.h\"</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> Eigen<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">compressImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>data <span class=\"token operator\">=</span> <span class=\"token function\">stbi_load</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> dataSize <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to Open File!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x:%d y:%d n:%d\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  Eigen<span class=\"token double-colon punctuation\">::</span>MatrixXd <span class=\"token function\">imgXY</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Correct the order of y and x</span>\n\n  Eigen<span class=\"token double-colon punctuation\">::</span>Vector3f <span class=\"token function\">greyConversion</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.299</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.587</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.114</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dataSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">auto</span> dataRGB <span class=\"token operator\">=</span>\n        <span class=\"token class-name\">Eigen</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Vector3f</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> n <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> greyCode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>dataRGB<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>greyConversion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> i <span class=\"token operator\">/</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> i <span class=\"token operator\">%</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">imgXY</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> greyCode<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  BDCSVD<span class=\"token operator\">&lt;</span>MatrixXd<span class=\"token operator\">></span> <span class=\"token function\">svd</span><span class=\"token punctuation\">(</span>imgXY<span class=\"token punctuation\">,</span> ComputeFullU <span class=\"token operator\">|</span> Eigen<span class=\"token double-colon punctuation\">::</span>ComputeFullV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  Eigen<span class=\"token double-colon punctuation\">::</span>VectorXd singularValues <span class=\"token operator\">=</span> svd<span class=\"token punctuation\">.</span><span class=\"token function\">singularValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> singularValues<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">350</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> singularValues<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    singularValues<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">auto</span> U <span class=\"token operator\">=</span> svd<span class=\"token punctuation\">.</span><span class=\"token function\">matrixU</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">auto</span> V <span class=\"token operator\">=</span> svd<span class=\"token punctuation\">.</span><span class=\"token function\">matrixV</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Eigen<span class=\"token double-colon punctuation\">::</span>MatrixXd mSV <span class=\"token operator\">=</span> singularValues<span class=\"token punctuation\">.</span><span class=\"token function\">asDiagonal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDenseMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  mSV<span class=\"token punctuation\">.</span><span class=\"token function\">conservativeResize</span><span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">.</span><span class=\"token function\">cols</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">.</span><span class=\"token function\">cols</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"U cols: %lu rows: %lu\\n\"</span><span class=\"token punctuation\">,</span> U<span class=\"token punctuation\">.</span><span class=\"token function\">cols</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> U<span class=\"token punctuation\">.</span><span class=\"token function\">rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msv cols: %lu rows: %lu\\n\"</span><span class=\"token punctuation\">,</span> mSV<span class=\"token punctuation\">.</span><span class=\"token function\">cols</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mSV<span class=\"token punctuation\">.</span><span class=\"token function\">rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"V cols: %lu rows: %lu\\n\"</span><span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">.</span><span class=\"token function\">cols</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">.</span><span class=\"token function\">rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Reconstruct the image matrix</span>\n  MatrixXd cImgMat <span class=\"token operator\">=</span> U <span class=\"token operator\">*</span> mSV <span class=\"token operator\">*</span> V<span class=\"token punctuation\">.</span><span class=\"token function\">transpose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// convert to char for stbi</span>\n  std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> charVec<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> row <span class=\"token operator\">&lt;</span> cImgMat<span class=\"token punctuation\">.</span><span class=\"token function\">rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> row<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> col <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> col <span class=\"token operator\">&lt;</span> cImgMat<span class=\"token punctuation\">.</span><span class=\"token function\">cols</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> col<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      charVec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">cImgMat</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// stride is size of each row</span>\n  <span class=\"token function\">stbi_write_png</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lennaBW.png\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> charVec<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                 <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">stbi_image_free</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">compressImage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lenna.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"the-result\" tabindex=\"-1\">The result <a class=\"header-anchor\" href=\"https://example.com/blog/svd-image-compression/\">#</a></h2>\n<p>The image was converted gray scale for the sake of simplicity, for color you need to run SVD on all the channels.</p>\n<img src=\"https://example.com/img/Lenna.png\">\n<img src=\"https://example.com/img/LennaBW.png\">\n",
			"date_published": "2024-03-25T17:38:11Z"
		}
		,
		{
			"id": "https://example.com/blog/fourthpost/",
			"url": "https://example.com/blog/fourthpost/",
			"title": "This is my fourth post.",
			"content_html": "<p>Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.</p>\n<p>Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.</p>\n<p><picture><source type=\"image/avif\" srcset=\"https://example.com/img/IdthKOzqFA-350.avif 350w\"><source type=\"image/webp\" srcset=\"https://example.com/img/IdthKOzqFA-350.webp 350w\"><img alt=\"A possum parent and two possum kids hanging from the iconic red balloon\" loading=\"lazy\" decoding=\"async\" src=\"https://example.com/img/IdthKOzqFA-350.png\" width=\"350\" height=\"685\"></picture></p>\n<h2 id=\"section-header\" tabindex=\"-1\">Section Header <a class=\"header-anchor\" href=\"https://example.com/blog/fourthpost/\">#</a></h2>\n<p>Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.</p>\n",
			"date_published": "2018-09-30T00:00:00Z"
		}
		,
		{
			"id": "https://example.com/blog/thirdpost/",
			"url": "https://example.com/blog/thirdpost/",
			"title": "This is my third post.",
			"content_html": "<p>Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.</p>\n<h2 id=\"code\" tabindex=\"-1\">Code <a class=\"header-anchor\" href=\"https://example.com/blog/thirdpost/\">#</a></h2>\n<h3 id=\"styled-with-syntax\" tabindex=\"-1\">Styled (with Syntax) <a class=\"header-anchor\" href=\"https://example.com/blog/thirdpost/\">#</a></h3>\n<p>Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token comment\">// this is a command</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tcounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Test with a line break above this line.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"unstyled\" tabindex=\"-1\">Unstyled <a class=\"header-anchor\" href=\"https://example.com/blog/thirdpost/\">#</a></h3>\n<p>Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.</p>\n<pre><code>// this is a command\nfunction myCommand() {\n\tlet counter = 0;\n\tcounter++;\n}\n\n// Test with a line break above this line.\nconsole.log('Test');\n</code></pre>\n<h2 id=\"section-header\" tabindex=\"-1\">Section Header <a class=\"header-anchor\" href=\"https://example.com/blog/thirdpost/\">#</a></h2>\n<p>Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.</p>\n",
			"date_published": "2018-08-24T00:00:00Z"
		}
		,
		{
			"id": "https://example.com/blog/secondpost/",
			"url": "https://example.com/blog/secondpost/",
			"title": "This is my second post with a much longer title.",
			"content_html": "<p>Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.</p>\n<h2 id=\"section-header\" tabindex=\"-1\">Section Header <a class=\"header-anchor\" href=\"https://example.com/blog/secondpost/\">#</a></h2>\n<p><a href=\"https://example.com/blog/firstpost/\">First post</a>\n<a href=\"https://example.com/blog/thirdpost/\">Third post</a></p>\n<p>Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.</p>\n<p>Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.</p>\n",
			"date_published": "2018-07-04T00:00:00Z"
		}
		,
		{
			"id": "https://example.com/blog/firstpost/",
			"url": "https://example.com/blog/firstpost/",
			"title": "This is my first post.",
			"content_html": "<p>Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.</p>\n<p>Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.</p>\n<h2 id=\"section-header\" tabindex=\"-1\">Section Header <a class=\"header-anchor\" href=\"https://example.com/blog/firstpost/\">#</a></h2>\n<p>Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.</p>\n<pre class=\"language-diff-js\" tabindex=\"0\"><code class=\"language-diff-js\"><span class=\"token unchanged language-js\"><span class=\"token prefix unchanged\"> </span><span class=\"token comment\">// this is a command</span>\n<span class=\"token prefix unchanged\"> </span><span class=\"token keyword\">function</span> <span class=\"token function\">myCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"token inserted-sign inserted language-js\"><span class=\"token prefix inserted\">+</span>  <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token deleted-sign deleted language-js\"><span class=\"token prefix deleted\">-</span>  <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token unchanged language-js\"><span class=\"token prefix unchanged\"> </span>  counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token prefix unchanged\"> </span><span class=\"token punctuation\">}</span>\n</span>\n<span class=\"token unchanged language-js\"><span class=\"token prefix unchanged\"> </span><span class=\"token comment\">// Test with a line break above this line.</span>\n<span class=\"token prefix unchanged\"> </span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></code></pre>\n",
			"date_published": "2018-05-01T00:00:00Z"
		}
		
	]
}
